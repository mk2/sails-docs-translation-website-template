<h1 id="miscellaneous-sails-config-">Miscellaneous (<code>sails.config.*</code>)</h1>
<p>For a conceptual overview of configuration in Sails, see <a href="/documentation/concepts/Configuration">http://sailsjs.com/documentation/concepts/Configuration</a>.</p>
<p>This page is a quick reference of assorted configuration topics that don&apos;t fit elsewhere, namely top-level properties on the sails.config object.  Many of these properties are best set on a <a href="/documentation/anatomy/my-app/config/env">per-environment basis</a>, or in your <a href="/documentation/concepts/configuration/the-local-js-file">config/local.js</a>.  To set them globally for your app, create a new file in the <code>config</code> folder (e.g. <code>config/misc.js</code>) and add them there.</p>
<h3 id="-sails-config-port-" permalink="sailsconfigport"><code>sails.config.port</code></h3>
<p>The <code>port</code> setting determines which <a href="http://en.wikipedia.org/wiki/Port_(computer_networking)" target="_blank">TCP port</a> your Sails app will use to listen for incoming requests.  Ports are a <a href="https://en.wikipedia.org/wiki/Transport_layer" target="_blank">transport-layer</a> concept designed to allow many different networking applications to run at the same time on a single computer.</p>
<p>By default, if it&#x2019;s set, Sails uses the port configured in your app (<code>sails.config.port</code>).  If not, it checks to see if the <code>PORT</code> environment variable is set, and uses that if possible.  Otherwise it falls back to port 1337.</p>
<blockquote>
<p>In production, you will probably want Sails to listen on port 80 (or 443, if you have an SSL certificate and are serving your site via <code>https://</code>.)  But depending on where your app is deployed, you may or may not need to actually modify this setting.  For example, if you are deploying to a PaaS like <a href="http://heroku.com" target="_blank">Heroku</a>, <a href="https://azure.microsoft.com/en-us/services/app-service/" target="_blank">Azure App Service</a>, or <a href="http://deis.io/" target="_blank">Deis</a>, you may not need to configure <code>sails.config.port</code>, since in most cases it is handled automatically.  For more guidance and tips related to deploying, scaling, and maintaining Sails in production, see <a href="/documentation/concepts/deployment">Concepts &gt; Deployment</a>.</p>
</blockquote>
<h3 id="-sails-config-explicithost-" permalink="sailsconfigexplicithost"><code>sails.config.explicitHost</code></h3>
<p>By default, Sails will assume <code>localhost</code> as the host that will be listening for incoming requests.  This will work in the majority of hosting environments you encounter, but in some cases (<a href="http://www.openshift.com" target="_blank">OpenShift</a> being one example) you&apos;ll need to explicitly declare the host name of your Sails app.  Setting <code>explicitHost</code> tells Sails to listen for requests on that host instead of <code>localhost</code>.</p>
<h3 id="-sails-config-proxyhost-and-sails-config-proxyport-" permalink="sailsconfigproxyhost-and-sailsconfigproxyport"><code>sails.config.proxyHost</code> and <code>sails.config.proxyPort</code></h3>
<p>If your site will ultimately be served by a proxy, you may want to set <code>proxyHost</code> to ensure that calls to <code>sails.getBaseurl()</code> return the expected host.  For example, if you deploy a Sails app on <a href="http://modulus.io" target="_blank">Modulus.io</a>, the ultimate URL for your site will be something like <code>http://mysite-12345.onmodulus.net</code>.  If you were to use <code>sails.getBaseurl()</code> to construct a URL in your app code, however, it would return something like <code>http://localhost:8080</code>.  Using <code>proxyHost</code> and <code>proxyPort</code> allow you to specify the host name and port of the proxy server that will be serving your app.  This ensure that any links created using <code>sails.getBaseurl()</code> are correct.</p>
<h3 id="-sails-config-environment-" permalink="sailsconfigenvironment"><code>sails.config.environment</code></h3>
<p>The runtime &#x201C;environment&#x201D; of your Sails app is usually either &#x2018;development&#x2019; or &#x2018;production&#x2019;.</p>
<p>In development, your Sails app will go out of its way to help you (for instance you will receive more descriptive error and debugging output).</p>
<p>In production, Sails configures itself (and its dependencies) to optimize performance.  You should always put your app in production mode before you deploy it to a server -- this helps ensure that your Sails app remains stable, performant, and scalable.</p>
<h4 id="using-the-production-environment" permalink="using-the-production-environment">Using the &quot;production&quot; environment</h4>
<p>By default, Sails determines its environment using the <code>NODE_ENV</code> environment variable. If <code>NODE_ENV</code> is not set, Sails will look to see if you provided a <code>sails.config.environment</code> setting, and use it if possible.  Otherwise, it runs in the &#x2018;development&#x2019; environment.</p>
<p>When you lift your app with the NODE_ENV environment variable to &quot;production&quot;, Sails automatically sets <code>sails.config.environment</code> to &quot;production&quot; too.  In fact, the reccommended way of switching to production mode is by _setting the NODE<em>ENV environment variable</em> to &quot;production&quot;.  This is usually a better idea than configuring <code>sails.config.environment</code> manually, since the NODE_ENV environment variable is relied upon by some of Sails&apos; dependencies, and automatically set by most Sails/Node.js hosting services.</p>
<blockquote>
<p>Prior to Sails v1.0, the opposite was also true (Sails set the NODE_ENV environment variable to &quot;production&quot; automatically when lifting with <code>sails.config.environment</code> set to &quot;production).  In Sails v1.0, that <a href="https://github.com/balderdashy/sails/blob/c4d6991ef1e63d1cab984bc635289d208e602b23/ROADMAP.md#v10" target="_blank">is changing</a> to provide better support for custom staging and sandbox environments.</p>
<p>For more background on configuring your Sails app for production, see <a href="/documentation/concepts/deployment">Concepts &gt; Deployment</a>.</p>
</blockquote>
<h3 id="-sails-config-hooktimeout-" permalink="sailsconfighooktimeout"><code>sails.config.hookTimeout</code></h3>
<p>Set a global timeout for Sails hooks, in milliseconds.  Sails will give up trying to lift if any hook takes longer than this to load.  Defaults to <code>20000</code>.</p>
<blockquote>
<p>The most common use for this setting is to tolerate slow production Grunt tasks.  For example, if your app is using uglify, and you have lots and lots of client-side JavaScript files in your assets folder, then you might need Sails to wait longer than 20 seconds to compile all of those client-side assets.  For more tips about the production asset pipeline, see <a href="/documentation/concepts/deployment">Concepts &gt; Deployment</a>.</p>
</blockquote>
<h3 id="-sails-config-keepresponseerrors-" permalink="sailsconfigkeepresponseerrors"><code>sails.config.keepResponseErrors</code></h3>
<p>By default, convenience functions <code>badRequest</code>, <code>forbidden</code>, <code>notFound</code>, and <code>serverError</code> will clear the response body when the environment is &quot;production&quot;.  This behavior may be undesirable in certain cases, such as exposing underlying Waterline validation errors to clients while responding through <code>badRequest</code>.</p>
<p>Set <code>keepResponseErrors</code> to <code>true</code> to ensure Sails preserves the response body for these functions.</p>
<blockquote>
<p>The default behavior of responses will be <a href="https://github.com/balderdashy/sails/blob/c4d6991ef1e63d1cab984bc635289d208e602b23/ROADMAP.md#v10" target="_blank">changing a bit in Sails v1.0</a>.</p>
</blockquote>
<h3 id="-sails-config-ssl-" permalink="sailsconfigssl"><code>sails.config.ssl</code></h3>
<p>SSL/TLS (transport-layer security) is critical for preventing potential man-in-the-middle attacks.  Without a protocol like SSL/TLS, web basics like securely transmitting login credentials and credit card numbers would be much more complicated and troublesome.  SSL/TLS is not only important for HTTP requests (<code>https://</code>); it&apos;s also necessary for WebSockets (over <code>wss://</code>).  Fortunately, you only need to worry configuring SSL settings in once place: <code>sails.config.ssl</code>.</p>
<blockquote>
<h4 id="ssl-and-load-balancers" permalink="ssl-and-load-balancers">SSL and Load Balancers</h4>
<p>The <code>sails.config.ssl</code> setting is only relevant if you want your <em>Sails process</em> to manage SSL.  This isn&apos;t always true.  For example, if you plan for your Sails app to get more and more traffic, it will need to scale to multiple servers, which means you&apos;ll need a load balancer.  Most of the time, for performance and simplicity, it is a good idea to terminate SSL at your load balancer.  If you do that, then since SSL/TLS will have already been dealt with <em>before packets reach your Sails app</em>, you actually won&apos;t need to use the <code>sails.config.ssl</code> setting at all.  (This is also true if you&apos;re using a PaaS like Heroku, or almost any other host with a built-in load balancer.)</p>
<p>If you&apos;re satisfied this configuration setting applies to your app, then please continue below for more details.</p>
</blockquote>
<p>Use <code>sails.config.ssl</code> to set up basic SSL server options, or to indicate that you will be specifying more advanced options in <a href="/documentation/reference/configuration/sails-config-http#?properties">sails.config.http.serverOptions</a>.</p>
<p>If you specify a dictionary, it should contain both <code>key</code> <em>and</em> <code>cert</code> keys, <em>or</em> a <code>pfx</code> key. The presence of those options indicates to Sails that your app should be lifted with an HTTPS server.  If your app requires a more complex SSL setup (for example by using <a href="https://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener" target="_blank">SNICallback</a>), set <code>sails.config.ssl</code> to <code>true</code> and specify your advanced options in <a href="/documentation/reference/configuration/sails-config-http#?properties">sails.config.http.serverOptions</a>.</p>
<h4 id="ssl-configuration-example" permalink="ssl-configuration-example">SSL Configuration Example</h4>
<p>For this example, we&apos;ll assume you created a folder in your project, <code>config/ssl/</code> and dumped your certificate/key files inside.  Then, in one of your config files, include the following:</p>
<pre><code class="javascript">// Assuming this is in `config/env/production.js`, and your folder of SSL cert/key files is in `config/ssl/`:

ssl: {
  ca: require(&apos;fs&apos;).readFileSync(require(&apos;path&apos;).resolve(__dirname,&apos;../ssl/my-gd-bundle.crt&apos;)),
  key: require(&apos;fs&apos;).readFileSync(require(&apos;path&apos;).resolve(__dirname,&apos;../ssl/my-ssl.key&apos;)),
  cert: require(&apos;fs&apos;).readFileSync(require(&apos;path&apos;).resolve(__dirname,&apos;../ssl/my-ssl.crt&apos;))
}
</code></pre><!-- __LANG=%%__ -->
<docmeta name="displayName" value="sails.config.*">
</docmeta>