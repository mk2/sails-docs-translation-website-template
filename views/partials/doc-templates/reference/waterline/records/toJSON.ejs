<h1 id="-tojson-">.toJSON()</h1>
<h3 id="purpose" permalink="purpose">Purpose</h3>
<p>This method also returns a cloned model instance.  This one however includes all instance methods.  Be sure to read the notes on this one.</p>
<h3 id="overview" permalink="overview">Overview</h3>
<h4 id="return-value" permalink="return-value">Return Value</h4>
<table>
<thead>
<tr>
<th></th>
<th>Description</th>
<th>Possible Data Types</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>Cloned Record</td>
<td><code>{ }</code></td>
</tr>
</tbody>
</table>
<h3 id="example-usage" permalink="example-usage">Example Usage</h3>
<pre><code class="javascript">User.find().exec(
  function(err,myRecord){
    var datUser = myRecord.pop().toObject();
    console.log(datUser);
  });

/* { id: 2,
  createdAt: &apos;2013-10-31T22:42:25.459Z&apos;,
  updatedAt: &apos;2013-11-01T20:12:55.534Z&apos;,
  name: &apos;Hank&apos;,
  phoneNumber: &apos;101-150-1337&apos; } */

User.find().exec(
  function(err,myRecord){
    var datUser = myRecord.pop().toJSON();
    console.log(datUser);
  });

/* { id: 2,
  createdAt: &apos;2013-10-31T22:42:25.459Z&apos;,
  updatedAt: &apos;2013-11-01T20:12:55.534Z&apos;,
  name: &apos;Hank&apos; } */



// Don&apos;t forget to handle your errors
</code></pre><!-- __LANG=%%__ -->
<p>For model</p>
<pre><code class="javascript">module.exports = {
  attributes: {
    name: &apos;string&apos;,
    phoneNumber: &apos;string&apos;,

    // Override the default toJSON method

    toJSON: function() {
      var obj = this.toObject();
      delete obj.phoneNumber;
      return obj;
    }
  }
}
</code></pre><!-- __LANG=%%__ -->
<p>Usage with custom attribute methods</p>
<pre><code class="javascript">module.exports = {
  attributes: {
    // Primitive attributes
    firstName: {
      type: &apos;string&apos;,
      defaultsTo: &apos;&apos;
    },
    lastName: {
      type: &apos;string&apos;,
      defaultsTo: &apos;&apos;
    },

    // Attribute methods
    getFullName: function (){
      return this.firstName + &apos; &apos; + this.lastName;
    },

    // Override the default toJSON method
    toJSON: function() {
      var obj = this.toObject();
      obj.fullName = this.getFullName();
      return obj;
    }
  }
}
</code></pre><!-- __LANG=%%__ -->
<h3 id="notes" permalink="notes">Notes</h3>
<blockquote>
<p>The real power of toJSON relies on the fact every model instance sent out via res.json is first passed through toJSON.
Instead of writing custom code for every controller action that uses a particular model (including the &quot;out of the box&quot; blueprints), you can manipulate outgoing records by simply overriding the default toJSON function in your model.
You would use this to keep private data like email addresses and passwords from being sent back to every client.</p>
<p>This is an instance method.  Currently, instance methods ARE NOT TRANSACTIONAL.  Because of this, it is recommended that you use the equivalent model method instead.</p>
</blockquote>
<p><docmeta name="displayName" value=".toJSON()"></docmeta></p>
<docmeta name="pageType" value="method">
</docmeta>