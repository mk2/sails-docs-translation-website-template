<h1 id="populated-values">Populated Values</h1>
<p>In addition to basic attribute data like email addresses, phone numbers, and birthdates, Waterline can dynamically store and retrieve linked sets of records using associations.  When <a href="/documentation/reference/waterline/queries/populate.html"><code>.populate()</code></a> is called on a query, each of the resulting records will contain one or more <strong>populated values</strong>.  Each one of those <strong>populated values</strong> is a snapshot of the record(s) linked to that particular association at the time of the query.</p>
<p>The type of a populated value is either:</p>
<ul>
<li><code>null</code>, or a plain old JavaScript object (POJO),  <em>(if it corresponds to a &quot;model&quot; association)</em> or</li>
<li>an empty array, or an array of plain old JavaScript objects <em>(if it corresponds to a &quot;collection&quot; association)</em></li>
</ul>
<p>For example, assuming we&apos;re dealing with orders of adorable wolf puppies:</p>
<pre><code class="javascript">Order.find()
.populate(&apos;buyers&apos;)  // a &quot;collection&quot; association
.populate(&apos;seller&apos;)  // a &quot;model&quot; association
.exec(function (err, orders){

  // this array is a snapshot of the Customers who are associated with the first Order as &quot;buyers&quot;
  orders[0].buyers;
  // =&gt; [ {id: 1, name: &apos;Robb Stark&apos;}, {id: 6, name: &apos;Arya Stark&apos;} ]

  // this object is a snapshot of the Company that is associated with the first Order as the &quot;seller&quot;
  orders[0].seller;
  // =&gt; { id: 42941, corporateName: &apos;WolvesRUs Inc.&apos; }

  // this array is empty because the second Order doesn&apos;t have any &quot;buyers&quot;
  orders[1].buyers;
  // =&gt; []

  // this is `null` because there is no &quot;seller&quot; associated with the second Order
  orders[1].seller;
  // =&gt; null
});
</code></pre><!-- __LANG=%%__ -->
<h3 id="modifying-populated-values" permalink="modifying-populated-values">Modifying populated values</h3>
<p>Changes to populated values are persisted (i.e. saved to the database) by calling <code>.save()</code> on the record they are attached to.  You cannot call <code>.save()</code> directly on a populated value.</p>
<p>Changing or remove the linked record of a &quot;model&quot; association can be accomplished by simply setting the property directly on the original record:</p>
<pre><code class="javascript">orders[1].seller = { corporateName: &apos;Wolf Orphanage&apos; };
</code></pre><!-- __LANG=%%__ -->
<p>&quot;collection&quot; associations, on the other hand, <em>do</em> have a couple of special (non-enumerable) methods for associating and disassociating linked records.  However, <code>.save()</code> must still be called on the original record in order for changes to be persisted to the database.</p>
<pre><code class="javascript">orders[1].buyers.add({ name: &apos;Jon Snow&apos; });
orders[1].save(function (err) { ... });
</code></pre><!-- __LANG=%%__ -->
<h3 id="example" permalink="example">Example</h3>
<p>Finally, to put it all together:</p>
<pre><code class="javascript">Order.find()
.populate(&apos;buyers&apos;)
.exec(function (err, orders){

  orders[1].buyers.add({ name: &apos;Jon Snow&apos; });
  orders[1].seller = { corporateName: &apos;Wolf Orphanage&apos; };
  orders[1].save(function (err) {
    if (err) {
      // handle error (e.g. `return res.serverError(err);` )
      return;
    }

    // We successfully created a new Customer named Jon and added
    // him to `order[1]` as one of its &quot;buyers&quot;.
    // We also created a new company and set it as `order[1]`&apos;s &quot;seller&quot;.
    //
    // If we had provided only a primary key value instead of an object,
    // in both cases Waterline would have tried to associate existing
    // Customer and Company records rather than creating new ones.
  });

});
</code></pre><!-- __LANG=%%__ -->
<docmeta name="displayName" value="Populated Values">
</docmeta>