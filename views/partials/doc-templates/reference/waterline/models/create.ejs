<h1 id="-create-">.create()</h1>
<p>Create a record in the database.</p>
<pre><code class="javascript">Something.create(values).exec(function (err, records) {

});
</code></pre><!-- __LANG=%%__ -->
<h3 id="usage" permalink="usage">Usage</h3>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:left">Argument</th>
<th>Type</th>
<th style="text-align:left">Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:left">values</td>
<td><bubble type="dictionary" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">The attributes that the new record should have.</td>
</tr>
</tbody>
</table>
<h5 id="callback" permalink="callback">Callback</h5>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:left">Argument</th>
<th>Type</th>
<th style="text-align:left">Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:left"><em>err</em></td>
<td><bubble type="Error?" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">The error that occurred, or <code>null</code> if there were no errors.  See below for an example of how to negotiate validation errors (e.g. attempting to insert a record that would violate a uniqueness constraint)</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:left">newRecord</td>
<td><bubble type="array" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">The newly-created record, with its primary key (usually <code>id</code>) set.</td>
</tr>
</tbody>
</table>
<h3 id="example" permalink="example">Example</h3>
<p>To create a user named Finn in the database:</p>
<pre><code class="javascript">User.create({name:&apos;Finn&apos;}).exec(function (err, finn){
  if (err) { return res.serverError(err); }

  sails.log(&apos;Finn\&apos;s id is:&apos;, finn.id);
  return res.ok();
});
</code></pre><!-- __LANG=%%__ -->
<h5 id="negotiating-validation-errors" permalink="negotiating-validation-errors">Negotiating Validation Errors</h5>
<blockquote>
<p>Originally posted in <a href="https://github.com/balderdashy/sails/issues/3459#issuecomment-170155680" target="_blank">#3459</a></p>
</blockquote>
<pre><code class="javascript">var Passwords = require(&apos;machinepack-passwords&apos;);


module.exports = {

  signup: function (req, res) {
    // Encrypt a string using the BCrypt algorithm.
    Passwords.encryptPassword({
      password: req.param(&apos;password&apos;),
    }).exec({
      // An unexpected error occurred encrypting the password.
      error: function (err){
        return res.serverError(err);
      },
      // OK.
      success: function (encryptedPassword) {

        // Create a user record in the database.
        User.create({
          email: req.param(&apos;email&apos;),
          password: encryptedPassword
        }).exec(function (err, newUser) {
          // If there was an error, we negotiate it.
          if (err) {

            // If this is NOT a waterline validation error, it is a mysterious error indeed.
            var isWLValidationErr = _.isObject(err) &amp;&amp; _.isObject(err.invalidAttributes);
            if (!isWLValidationErr) {
              return res.serverError(err);
            }

            // Otherwise, it must be a waterline validation error.

            // If it doesn&apos;t contain a problem with the password, then just handle is
            // using `res.badRequest()` like normal.
            if (!_.isArray(err.invalidAttributes.password)) {
              return res.badRequest(err);
            }

            // Otherwise, something was wrong with the provided encrypted password.
            // So in this case, we&apos;ll modify the validation error in place to improve the error output
            // and so that we don&apos;t inadvertently reveal info about the encrypted password.
            // (specifically, we loop over the array of attribute errors and modify them).
            err.invalidAttributes.password = _.map(err.invalidAttributes.password, function eachPasswordErr (passwordError) {
              return _.reduce(passwordError, function (memo, val, key) {
                var allOccurrencesOfEncryptedPassMatcher = new RegExp(_.escapeRegExp(encryptedPassword),&apos;g&apos;);
                memo[key] = val.replace(allOccurrencesOfEncryptedPassMatcher, &apos;****&apos;);
                return memo;
              }, {});
            });

            // Finally, respond with the modified waterline validation error and a 400 status code.
            return res.badRequest(err);

          }//&lt;/if (err)&gt;

          // Otherwise, `err` was falsy, so it worked!  The user was created.
          // (maybe do other stuff here, or just send a 200 OK response)
          return res.ok();

        });//&lt;/User.create&gt;
      }
    });//&lt;/Passwords.encryptPassword&gt;
  }//&lt;/UserController.signup&gt;
});
</code></pre><!-- __LANG=%%__ -->
<p><docmeta name="displayName" value=".create()"></docmeta></p>
<docmeta name="pageType" value="method">
</docmeta>