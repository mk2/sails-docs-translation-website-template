<h1 id="req-file-">req.file()</h1>
<p>Build and return a <a href="https://github.com/balderdashy/skipper" target="_blank">Skipper Upstream</a> representing an incoming multipart file upload from the specified <code>field</code>.</p>
<pre><code class="javascript">req.file(field);
</code></pre><!-- __LANG=%%__ -->
<h3 id="usage" permalink="usage">Usage</h3>
<table>
<thead>
<tr>
<th></th>
<th>Argument</th>
<th style="text-align:center">Type</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>field</code></td>
<td style="text-align:center"><bubble type="string" class="colors"><span is="bubble-heart"></span></bubble></td>
<td>The name of the file parameter to listen on for uploads; e.g. <code>avatar</code>.</td>
</tr>
</tbody>
</table>
<h3 id="details" permalink="details">Details</h3>
<p><code>req.file()</code> comes from <a href="https://github.com/balderdashy/skipper" target="_blank">Skipper</a>, an opinionated variant of the original Connect body parser that allows you to take advantage of high-performance, streaming file uploads without any dramatic changes in your application logic.</p>
<p>This is a great simplification, but comes with a minor caveat:  <strong>Text parameters must be included before files in the request body.</strong>  Typically, these text parameters contain string metadata which provides additional information about the file upload.</p>
<p>Multipart requests to Sails should send all of their <strong>text parameters</strong>. before sending <em>any</em> <strong>file parameters</strong>.  For instance, if you&apos;re building a web frontend that communicates with Sails, you should include text parameters <em>first</em> in any form upload or AJAX file upload requests.  The term &quot;text parameters&quot; refers to the metadata parameters you might send along with the file(s) providing some additional information about this upload.</p>
<h3 id="how-it-works" permalink="how-it-works">How It Works</h3>
<p>Skipper treats <em>all</em> file uploads as streams.  This allows users to upload monolithic files with minimal performance impact and no disk footprint, all the while protecting your app against nasty denial-of-service attacks involving tmp files.</p>
<p>When a multipart request hits your server, instead of writing temporary files to disk, Skipper buffers the request just long enough to run your app code, giving you an opportunity to &quot;plug in&quot; to a compatible blob receiver.  If you don&apos;t &quot;plug in&quot; the data from a particular field, the Upstream hits its &quot;high water mark&quot;, the buffer is flushed, and subsequent incoming bytes on that field are ignored.</p>
<h3 id="example" permalink="example">Example</h3>
<p>In a controller action or policy:</p>
<pre><code class="javascript">// See the Skipper README on GitHub for usage documentation for `.upload()`, including
// a complete list of options.
req.file(&apos;avatar&apos;).upload(function (err, uploadedFiles){
  if (err) return res.serverError(err);
  return res.json({
    message: files.length + &apos; file(s) uploaded successfully!&apos;,
    files: files
  });
});
</code></pre><!-- __LANG=%%__ -->
<h3 id="notes" permalink="notes">Notes</h3>
<blockquote>
<ul>
<li>Remember that the client request&apos;s <strong>text parameters must be sent first</strong>, before the file parameters.</li>
<li><code>req.file()</code> supports multiple files sent over the same field, but it&apos;s important to realize that, as a consequence, the Upstream it returns is actually a stream (buffered event emitter) of potential binary streams (files). Specifically, an <a href="https://github.com/balderdashy/skipper/blob/master/lib/Upstream.js" target="_blank"><code>Upstream</code></a> is a <a href="http://nodejs.org/api/stream.html#stream_class_stream_readable" target="_blank">Node.js Readable stream</a> in &quot;object mode&quot;, where each object is itself an incoming multipart file upload stream.</li>
<li>If you prefer to work directly with the Upstream as a stream of streams, you can omit the <code>.upload()</code> method and bind &quot;finish&quot; and &quot;error&quot; events (or use <code>.pipe()</code>) instead.  <a href="https://github.com/balderdashy/skipper/blob/master/lib/Upstream.js#L126" target="_blank">Under the covers</a>, all <code>.upload()</code> is doing is piping the <strong>Upstream</strong> into the specified receiver instance, then running the specified callback when the Upstream emits either a <code>finish</code> or <code>error</code> event.</li>
</ul>
</blockquote>
<p><docmeta name="displayName" value="req.file()"></docmeta></p>
<docmeta name="pageType" value="method">
</docmeta>