<h1 id="add-blueprint-">Add (Blueprint)</h1>
<p>Add a foreign record (e.g. a comment) to one of this record&apos;s collection associations (e.g. &quot;comments&quot;).</p>
<pre><code class="nohighlight">POST /:model/:id/:association/:fk
</code></pre><!-- __LANG=%%__ -->
<p>This action pushes a reference to some other record (the &quot;foreign&quot; record) onto a collection attribute of this record (the &quot;primary&quot; record).</p>
<ul>
<li>If <code>:fk</code> of an existing foreign record is supplied, it will be associated with the primary record.</li>
<li>If no <code>:fk</code> is supplied, and the body of the <strong>POST</strong> contains values for a new record, that record will be created and associated with the primary record.</li>
<li>If the collection association within the primary record already contains a reference to the foreign record, this action will be ignored.</li>
<li>If the association is 2-way (i.e. reflexive, with &quot;via&quot; on both sides) the association on the foreign record will also be updated.</li>
</ul>
<h3 id="parameters" permalink="parameters">Parameters</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Parameter</th>
<th>Type</th>
<th style="text-align:left">Details</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"> model</td>
<td><bubble type="string" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">The <a href="/documentation/concepts/models-and-orm/model-settings#?identity">identity</a> of the containing model for the parent record.<br><br>e.g. <code>&apos;employee&apos;</code> (in <code>/employee/7/involvedinPurchases/47</code>)</td>
</tr>
<tr>
<td style="text-align:left"> id</td>
<td><bubble type="string" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">The desired target record&apos;s primary key value<br><br>e.g. <code>&apos;7&apos;</code> (in <code>/employee/7/involvedInPurchases/47</code>)</td>
</tr>
<tr>
<td style="text-align:left"> association</td>
<td><bubble type="string" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">The name of the collection association<br><br>e.g. <code>&apos;involvedInPurchases&apos;</code></td>
</tr>
<tr>
<td style="text-align:left"> fk</td>
<td><bubble type="string" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">The primary key (e.g. <code>id</code>) of the foreign record to add to this collection association.<br><br>e.g. <code>47</code></td>
</tr>
<tr>
<td style="text-align:left"> <em>callback</em></td>
<td><bubble type="string?" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">If specified, a JSONP response will be sent (instead of JSON). This is the name of the client-side javascript function to call, passing results as the first (and only) argument<br> <br> e.g. <code>?callback=myJSONPHandlerFn</code></td>
</tr>
</tbody>
</table>
<h3 id="example" permalink="example">Example</h3>
<p>Add purchase #47 to the list of purchases that Dolly (employee #7) has been involved in:</p>
<pre><code class="nohighlight">POST /employee/7/involvedInPurchases/47
</code></pre><!-- __LANG=%%__ -->
<p><a href="https://www.getpostman.com/run-collection/96217d0d747e536e49a4" target="_blank"><img src="https://s3.amazonaws.com/postman-static/run-button.png" alt="Run in Postman"></a></p>
<h5 id="expected-response" permalink="expected-response">Expected response</h5>
<p>This returns &quot;Dolly&quot;, the parent record.  Notice she is now involved in purchase #47:</p>
<pre><code class="json">{
  &quot;id&quot;: 7,
  &quot;createdAt&quot;: &quot;2014-08-03T01:16:35.440Z&quot;,
  &quot;name&quot;: &quot;Dolly&quot;,
  &quot;updatedAt&quot;: &quot;2014-08-03T01:51:41.567Z&quot;,
  &quot;involvedInPurchases&quot;: [
    {
      &quot;amount&quot;: 10000,
      &quot;createdAt&quot;: &quot;2014-08-03T01:50:33.898Z&quot;,
      &quot;updatedAt&quot;: &quot;2014-08-03T01:51:08.227Z&quot;,
      &quot;id&quot;: 47,
      &quot;cashier&quot;: 7
    }
  ]
}
</code></pre><!-- __LANG=%%__ -->
<h5 id="using-jquery" permalink="using-jquery">Using jQuery</h5>
<pre><code class="javascript">$.post(&apos;/employee/7/involvedInPurchases/47&apos;, function (purchases) {
  console.log(purchases);
});
</code></pre><!-- __LANG=%%__ -->
<h5 id="using-angular" permalink="using-angular">Using Angular</h5>
<pre><code class="javascript">$http.post(&apos;/employee/7/involvedInPurchases/47&apos;)
.then(function (purchases) {
  console.log(purchases);
});
</code></pre><!-- __LANG=%%__ -->
<h5 id="using-sails-io-js" permalink="using-sailsiojs">Using sails.io.js</h5>
<pre><code class="javascript">io.socket.post(&apos;/employee/7/involvedInPurchases/47&apos;, function (purchases) {
  console.log(purchases);
});
</code></pre><!-- __LANG=%%__ -->
<h5 id="using-curl-http-en-wikipedia-org-wiki-curl-" permalink="using-curl">Using <a href="http://en.wikipedia.org/wiki/CURL" target="_blank">cURL</a></h5>
<pre><code class="bash">curl http://localhost:1337/employee/7/involvedInPurchases/47 -X &quot;POST&quot;
</code></pre><!-- __LANG=%%__ -->
<h3 id="notes" permalink="notes">Notes</h3>
<blockquote>
<ul>
<li>If you&apos;d like to spend some more time with Dolly, a more detailed walkthrough related to the example above is available <a href="https://gist.github.com/mikermcneil/e5a20b03be5aa4e0459b" target="_blank">here</a>.</li>
<li>This action is for dealing with <em>plural</em> (&quot;collection&quot;) associations.  If you want to set or unset a <em>singular</em> (&quot;model&quot;) association, just use <a href="/documentation/reference/blueprint-api/Update.html">update</a> and set the model association to the id of the new foreign record (or <code>null</code> to clear the association).</li>
<li><p>The example above assumes &quot;rest&quot; blueprints are enabled, and that your project contains at least an &apos;Employee&apos; model with association: <code>involvedInPurchases: {collection: &apos;Purchase&apos;, via: &apos;cashier&apos;}</code> as well as a <code>Purchase</code> model with association: <code>cashier: {model: &apos;Employee&apos;}</code>.  You&apos;ll also need at least an empty <code>PurchaseController</code> and <code>EmployeeController</code>.  You can quickly achieve this by running:</p>
<pre><code class="shell">$ sails new foo
$ cd foo
$ sails generate api purchase
$ sails generate api employee
</code></pre><!-- __LANG=%%__ -->
</li>
</ul>
<p>...then editing <code>api/models/Purchase.js</code> and <code>api/models/Employee.js</code>.</p>
</blockquote>
<p><docmeta name="displayName" value="add to"></docmeta></p>
<docmeta name="pageType" value="endpoint">
</docmeta>