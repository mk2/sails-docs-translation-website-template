<h1 id="-publishadd-">.publishAdd()</h1>
<p>Broadcast a conventional message indicating that a record has been newly added to one of this parent record&apos;s collections.</p>
<pre><code class="javascript">Something.publishAdd(id, association, added);
</code></pre><!-- __LANG=%%__ -->
<p><em>Or:</em></p>
<ul>
<li><code>Something.publishAdd(id, association, added, req);</code></li>
<li><code>Something.publishAdd(id, association, added, req, options);</code></li>
</ul>
<h3 id="usage" permalink="usage">Usage</h3>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:left">Argument</th>
<th>Type</th>
<th style="text-align:left">Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:left"><code>id</code></td>
<td><bubble type="number" class="colors"><span is="bubble-heart"></span></bubble>,<bubble type="string" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">The id (primary key) of the parent record.</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:left"><code>association</code></td>
<td><bubble type="string" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">The name of the association that the child record was added to (e.g. <code>&quot;comments&quot;</code>)</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:left"><code>added</code></td>
<td><bubble type="number" class="colors"><span is="bubble-heart"></span></bubble>,<bubble type="string" class="colors"><span is="bubble-heart"></span></bubble>,<bubble type="dictionary" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">Either a number or string to represent the id (primary key) of the child record being added, <strong>or a dictionary</strong> of properties describing it (must contain an <code>id</code> key!).  Either way, this information will be bundled in the socket message which is broadcasted.</td>
</tr>
<tr>
<td>4</td>
<td style="text-align:left"><em><code>req</code></em></td>
<td><bubble type="req?" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">If provided, then the requesting socket <em>will be excluded</em> from the broadcast.</td>
</tr>
<tr>
<td>5</td>
<td style="text-align:left"><em><code>options</code></em></td>
<td><bubble type="dictionary?" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">A dictionary of additional options.  See below.</td>
</tr>
</tbody>
</table>
<h5 id="additional-options" permalink="additional-options">Additional Options</h5>
<p>By default, when <code>publishAdd()</code> is called, it checks whether any associated records were also affected by the addition, and possibly sends out additional notifications (if a reflexive association was changed).</p>
<p>For example, let&apos;s say a <code>User</code> model has a <code>pets</code> association (a <em>plural</em> aka &quot;collection&quot; association) which connects each User record with none, one, or several distinct Pet records.  On the other side, let&apos;s say each Pet record has an <code>owner</code> association (a <em>singular</em> or &quot;model&quot; association), which means it can have exactly zero or one owners.  If <code>User.publishAdd(4, &apos;pets&apos;, 9)</code> is called under these circumstances, then not only will it broadcast the normal &quot;addedTo&quot; message to user 4, it will also broadcast an &quot;updated&quot; message to pet 9 (indicating that its <code>owner</code> has changed).</p>
<p>To suppress automatic broadcasts for reflexive associations, provide an <code>options</code> dictionary and set the <code>options.noReverse</code> flag to <code>true</code>.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Option</th>
<th>Type</th>
<th style="text-align:left">Details</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>noReverse</code></td>
<td><bubble type="boolean" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">If set, automatic broadcasts for reflexive associations will be suppressed.</td>
</tr>
</tbody>
</table>
<h5 id="behavior" permalink="behavior">Behavior</h5>
<p>By convention, this message indicates that a new child record has been added to the specified collection association of this parent record (and that client-side sockets receiving the message should update their user interface to match).  In other words, if a <code>Tutorial</code> model has an associated collection of &quot;comments&quot; (referring to records of the <code>Comment</code> model), then you might call <code>Tutorial.publishAdd()</code> to notify connected clients that a new comment has been added to the tutorial.</p>
<p>When your app calls <code>publishAdd()</code>, a socket message is broadcasted to all sockets subscribed to the record&apos;s room (i.e. via the <code>subscribe()</code> resourceful pubsub method) and the model identity is used as the event name.</p>
<p>The socket message is an object with the following properties:</p>
<ul>
<li><strong>id</strong> - the <code>id</code> attribute of the parent record</li>
<li><strong>verb</strong>  - always provided as the string: <code>&quot;addedTo&quot;</code></li>
<li><strong>attribute</strong> - the name of the model attribute (collection association) that was added to</li>
<li><strong>addedId</strong> - the id of the newly added child record</li>
<li><strong>added</strong> -  Not guaranteed.  Will only be present if a dictionary of properties for the newly added child record was provided, rather than just its id.</li>
</ul>
<h3 id="example" permalink="example">Example</h3>
<pre><code class="javascript">// Broadcast a message to all client-side sockets subscribed to the tutorial record w/ id=3
// letting them know that a new child record with id=17 has been associated and is now one of the
// tutorial&apos;s &quot;comments&quot;.
Tutorial.publishAdd(3, &apos;comments&apos;, 17);
</code></pre><!-- __LANG=%%__ -->
<pre><code class="javascript">// Broadcast a message to all client-side sockets subscribed to the tutorial record w/ id=3
// letting them know that a new child record with the specified properties has been associated
// and is now one of the tutorial&apos;s &quot;comments&quot;.
// (Note that we also pass in `req` to prevent the requesting socket from receiving the broadcast.)
Tutorial.publishAdd(3, &apos;comments&apos;, {
  id: 17,
  message: &apos;I love this show!&apos;
}, req);
</code></pre><!-- __LANG=%%__ -->
<p>Meanwhile, on the front-end, you might do something like this:</p>
<pre><code class="javascript">// e.g. in the browser...
io.socket.on(&apos;tutorial&apos;, function (event){
  switch (event.verb) {
    &apos;addedTo&apos;:
      console.log(event);
      // =&gt; see below
      break;
    default:
      console.warn(&apos;Unrecognized socket event (`%s`) from server:&apos;,event.verb, event);
  }
});
</code></pre><!-- __LANG=%%__ -->
<p>In the case of the first example call to <code>publishAdd</code> above, the logged message would look like:</p>
<pre><code class="javascript">{
  verb: &apos;addedTo&apos;,
  id: 3,
  attribute: &apos;comments&apos;,
  addedId: 17
}
</code></pre><!-- __LANG=%%__ -->
<p>Whereas in the latter case, note that <code>added</code> is also present thanks to the <bubble type="dictionary" class="colors"><span is="bubble-heart"></span></bubble> usage:</p>
<pre><code class="javascript">{
  verb: &apos;addedTo&apos;,
  id: 3,
  attribute: &apos;comments&apos;,
  addedId: 17,
  added: {
    id: 17,
    message: &apos;I love this show!&apos;
  }
}
</code></pre><!-- __LANG=%%__ -->
<h3 id="notes" permalink="notes">Notes</h3>
<blockquote>
<ul>
<li>It is important to understand that this method <strong>does not actually do anything to your database</strong>-- it is purely a conventional way of <em>announcing</em> that changes have occurred.  Underneath the covers, the resourceful pubsub methods are just using combinations of <code>sails.sockets</code> methods.</li>
<li>Under the covers, resourceful pubsub methods use <code>sails.sockets.*</code> methods.  When/if you encounter a need for customization beyond what is supported out of the box in a resourceful pubsub method, you should use the methods exposed in <a href="/documentation/reference/web-sockets/sails-sockets"><code>sails.sockets.*</code></a> directly.</li>
<li>Be sure and check <code>req.isSocket === true</code> before passing in <code>req</code> to refer to the requesting socket.  If used, the provided <code>req</code> must be from a socket request, not just any old HTTP request.</li>
<li>This method works much in the same way as <a href="/documentation/reference/web-sockets/resourceful-pub-sub/message"><code>.message()</code></a>-- it just represents a more specific use case and has a few special features as described above.  For more conceptual background, see the overview on <a href="/documentation/reference/web-sockets/resourceful-pub-sub">resourceful pubsub</a>.</li>
<li>If you are using <a href="/documentation/reference/blueprint-api">Sails&apos; blueprint API</a>, this resourceful pubsub method is called automatically by built-in code within the blueprints hook in Sails core.  The cleanest way to customize this, or any other behavior bundled in a blueprint API, is to override it with a custom action.</li>
</ul>
</blockquote>
<p><docmeta name="displayName" value=".publishAdd()"></docmeta></p>
<docmeta name="pageType" value="method">

</docmeta>