<h1 id="-publishremove-">.publishRemove()</h1>
<p>Broadcast a conventional message indicating that a record has been removed from one of this parent record&apos;s collections.</p>
<pre><code class="javascript">Something.publishRemove( id, association, fk )
</code></pre><!-- __LANG=%%__ -->
<p><em>Or:</em></p>
<ul>
<li><code>Something.publishRemove(id, association, fk, req)</code></li>
<li><code>Something.publishRemove(id, association, fk, req, options)</code></li>
</ul>
<h3 id="usage" permalink="usage">Usage</h3>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:left">Argument</th>
<th>Type</th>
<th style="text-align:left">Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:left"><code>id</code></td>
<td><bubble type="string" class="colors"><span is="bubble-heart"></span></bubble>,<bubble type="number" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">The <code>id</code> of the parent record whose subscribers will receive this broadcast. <br><br> e.g. <code>4</code></td>
</tr>
<tr>
<td>2</td>
<td style="text-align:left"><code>association</code></td>
<td><bubble type="string" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">The name of the collection association.<br><br>e.g. <code>&apos;pets&apos;</code></td>
</tr>
<tr>
<td>3</td>
<td style="text-align:left"><code>fk</code></td>
<td><bubble type="string" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">The foreign key value (e.g. <code>id</code>) of the associated record being removed.<br><br>e.g. <code>9</code></td>
</tr>
<tr>
<td>4</td>
<td style="text-align:left"><em><code>req</code></em></td>
<td><bubble type="req?" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">If provided, then the requesting socket <em>will be excluded</em> from the broadcast.</td>
</tr>
<tr>
<td>5</td>
<td style="text-align:left"><em><code>options</code></em></td>
<td><bubble type="dictionary?" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">A dictionary of additional options.  See below.</td>
</tr>
</tbody>
</table>
<h5 id="additional-options" permalink="additional-options">Additional Options</h5>
<p>By default, when <code>publishRemove()</code> is called, it checks whether any associated records were also affected by the removal, and possibly sends out additional notifications (if a reflexive association was changed).</p>
<p>For example, let&apos;s say a <code>User</code> model has a <code>pets</code> association (a <em>plural</em>, or &quot;collection&quot; association) which connects each User record with none, one, or several distinct Pet records.  On the other side, let&apos;s say each Pet record has an <code>owner</code> association (a <em>singular</em> or &quot;model&quot; association), which means it can have exactly zero or one owners.  If <code>User.publishRemove(4, &apos;pets&apos;, 9)</code> is called under these circumstances, then not only will it broadcast the normal &quot;removedFrom&quot; message to user 4, it will also broadcast a &quot;updated&quot; message to pet 9 (indicating that its <code>owner</code> has changed).</p>
<p>To suppress automatic broadcasts for reflexive associations, provide an <code>options</code> dictionary and set the <code>options.noReverse</code> flag to <code>true</code>.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Option</th>
<th>Type</th>
<th style="text-align:left">Details</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>noReverse</code></td>
<td><bubble type="boolean" class="colors"><span is="bubble-heart"></span></bubble></td>
<td style="text-align:left">If set, automatic broadcasts for reflexive associations will be suppressed.</td>
</tr>
</tbody>
</table>
<h5 id="behavior" permalink="behavior">Behavior</h5>
<p><code>publishRemove()</code> broadcasts to all sockets subscribed to the record (e.g. via <a href="/documentation/reference/web-sockets/resourceful-pub-sub/subscribe"><code>.subscribe()</code></a>) and uses the model&apos;s <a href="/documentation/concepts/models-and-orm/model-settings#?identity">identity</a> as the event name.  The broadcasted event data received by the subscribed sockets will be a dictionary with the following properties:</p>
<ul>
<li><strong>verb</strong>  - a <bubble type="string" class="colors"><span is="bubble-heart"></span></bubble> constant: <code>&apos;removedFrom&apos;</code></li>
<li><strong>id</strong> - the parent record&apos;s <code>id</code> which is a <bubble type="string" class="colors"><span is="bubble-heart"></span></bubble> or <bubble type="number" class="colors"><span is="bubble-heart"></span></bubble></li>
<li><strong>attribute</strong> - the name of the collection association from whence the removed record was pulled (<bubble type="string" class="colors"><span is="bubble-heart"></span></bubble>)</li>
<li><strong>removedId</strong> - the id of the record that was removed (i.e. <code>fk</code>) which is a <bubble type="string" class="colors"><span is="bubble-heart"></span></bubble> or <bubble type="number" class="colors"><span is="bubble-heart"></span></bubble></li>
</ul>
<h3 id="example" permalink="example">Example</h3>
<p>Find Elixabeth by her username and steal her favorite cat, then broadcast a message about it to all of her subscribers:</p>
<pre><code class="javascript">User.findOne({username: &apos;elizabeth&apos;})
.populate(&apos;pets&apos;, { limit: 5 })
.exec(function(err, liz){
  if (err) return res.serverError(err);
  if (!liz) return res.notFound();

  // The Pet with id=3 is Liz&apos;s favorite cat, Humphrey.
  liz.pets.remove(3);
  liz.pets.save(function (err){
    if (err) return res.serverError(err);

    // Broadcast a message telling anyone subscribed to Liz that Humphrey ran away.
    // Note that we exclude the requesting socket from the broadcast.
    // Also note that, since we set `noReverse`, no &quot;pet&quot; events will be broadcasted
    // to Humphrey&apos;s subscribers (Liz wouldn&apos;t want us to worry them).
    User.publishRemove(liz.id, &apos;pets&apos;, 3, req, { noReverse: true });

    return res.ok();
  });
});
</code></pre><!-- __LANG=%%__ -->
<p>The endpoint will respond with a simple 200 (because of <code>res.ok()</code>), but all subscribed client sockets will receive a <code>user</code> event:</p>
<pre><code class="javascript">// e.g. in the browser...
io.socket.on(&apos;user&apos;, function (event){
  switch (event.verb) {
    &apos;removedFrom&apos;:
      console.log(event);
      // =&gt; see below
      break;
    default:
      console.warn(&apos;Unrecognized socket event (`%s`) from server:&apos;,event.verb, event);
  }
});
</code></pre><!-- __LANG=%%__ -->
<p>In this case, the logged message would look like this:</p>
<pre><code class="javascript">{
  verb: &apos;removedFrom&apos;,
  id: 194,
  attribute: &apos;pets&apos;,
  removedId: 3
}
</code></pre><!-- __LANG=%%__ -->
<h3 id="notes" permalink="notes">Notes</h3>
<blockquote>
<ul>
<li>This method works much in the same way as <a href="/documentation/reference/web-sockets/resourceful-pub-sub/message"><code>.message()</code></a>-- it just represents a more specific use case and has a few special features as described above.  For more conceptual background, see the overview on <a href="/documentation/reference/web-sockets/resourceful-pub-sub">resourceful pubsub</a>.</li>
<li>Be sure and check <code>req.isSocket === true</code> before passing in <code>req</code> to refer to the requesting socket.  If used, the provided <code>req</code> must be from a socket request, not just any old HTTP request.</li>
<li>It is important to understand that this method <strong>does not actually do anything to your database</strong>-- it is purely a conventional way of <em>announcing</em> that changes have occurred.  Underneath the covers, the resourceful pubsub methods are just using combinations of <code>sails.sockets</code> methods.</li>
</ul>
</blockquote>
<p><docmeta name="displayName" value=".publishRemove()"></docmeta></p>
<docmeta name="pageType" value="method">
</docmeta>