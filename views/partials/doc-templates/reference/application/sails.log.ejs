<h1 id="sails-log-">sails.log()</h1>
<p>Log a message or some data at the &quot;debug&quot; <a href="/documentation/reference/configuration/sails-config-log">log level</a> using Sails&apos; <a href="/documentation/concepts/logging">built-in logger</a>.</p>
<pre><code class="javascript">sails.log(...);
</code></pre><!-- __LANG=%%__ -->
<h3 id="usage" permalink="usage">Usage</h3>
<p>This function&apos;s usage is purposely very similar to Node&apos;s <a href="https://nodejs.org/api/console.html#console_console_log_data" target="_blank"><code>console.log()</code></a>, but with a handful of extra features; namely support for multiple log levels with colorized, prefixed console output.</p>
<p>Note that standard <code>console.log()</code> conventions from Node.js apply:</p>
<ul>
<li>an <a href="https://en.wikipedia.org/wiki/Variadic_function" target="_blank">unlimited number</a> of arguments, separated by commas</li>
<li>printf-style parameterization (a la <a href="https://nodejs.org/api/util.html#util_util_format_format" target="_blank"><code>util.format()</code></a>)</li>
<li>objects, dates, arrays, and most other data types are pretty-printed using the built-in logic in <a href="https://nodejs.org/api/util.html#util_util_inspect_object_options" target="_blank"><code>util.inspect()</code></a> (e.g. you see <code>{ pet: { name: &apos;Hamlet&apos; } }</code> instead of <code>[object Object]</code>.)</li>
<li>if you log an object with a custom <code>inspect()</code> method, that method will run automatically, and the string that it returns will be written to the console.</li>
</ul>
<h3 id="example" permalink="example">Example</h3>
<pre><code class="javascript">var sum = +req.param(&apos;x&apos;) + +req.param(&apos;y&apos;);
sails.log();
sails.log(&apos;Hey %s, did you know that the sum of %d and %d is %d?&apos;, req.param(&apos;name&apos;), +req.param(&apos;x&apos;), +req.param(&apos;y&apos;), sum);
sails.log(&apos;Bet you didn\&apos;t know robots could do math, huh?&apos;);
sails.log();
sails.log(&apos;Anyways, here is a dictionary containing all the parameters I received in this request:&apos;, req.allParams());
sails.log(&apos;Until next time!&apos;);
return res.ok();
</code></pre><!-- __LANG=%%__ -->
<h3 id="notes" permalink="notes">Notes</h3>
<blockquote>
<ul>
<li>For a deeper conceptual exploration of logging in Sails, see <a href="/documentation/concepts/logging">concepts/logging</a>.</li>
<li>Remember: in addition to being exposed as an alternative to calling <code>console.log</code> directly, the built-in logger in Sails is called internally by the framework.  The Sails logger can be configured, or completely overridden using built-in log configuration settings (<a href="/documentation/reference/configuration/sails-config-log"><code>sails.config.log</code></a>).</li>
<li>Keep in mind that, like any part of Sails, using <code>sails.log</code> is completely optional.  Most Sails apps take advantage of the built-in logger; while some users prefer to stick with <code>console.log()</code>, while still others <code>require()</code> more feature-rich libraries like <a href="https://www.npmjs.com/package/winston" target="_blank">Winston</a>. If you aren&apos;t sure what your app needs yet, start with the built-in logger and go from there.</li>
</ul>
</blockquote>
<p><docmeta name="displayName" value="sails.log()"></docmeta></p>
<docmeta name="pageType" value="method">

</docmeta>