<h1 id="one-to-one">One-to-One</h1>
<p><strong>AKA &quot;Has One&quot;</strong></p>
<h3 id="overview" permalink="overview">Overview</h3>
<p>A one-to-one association states that a model may only be associated with one other model. In order
for the model to know which other model it is associated with, a foreign key must be included on one of the
records along with a <code>unique</code> database constraint on it.</p>
<p>There are currently two ways of handling this association in Waterline.</p>
<h3 id="has-one-using-a-collection" permalink="has-one-using-a-collection">Has One Using A Collection</h3>
<p>In this example, we are associating a <code>Pet</code> with a <code>User</code>. The <code>User</code> may only have one <code>Pet</code> and viceversa, a <code>Pet</code> can only have one <code>User</code>. However in order to query from both sides in this example we must add a <code>collection</code> attribute to the <code>User</code> model. This allows us to call both <code>User.find().populate(&apos;pet&apos;)</code> along with <code>Pet.find().populate(&apos;owner&apos;)</code>.</p>
<p>The two models will stay in sync by updating the <code>Pet</code> model&apos;s <code>owner</code> attribute. Adding the <code>unique</code> property ensures that only one value for each <code>owner</code> will exist in the database. The downside is that when populating from the <code>User</code> side you will always get an array back.</p>
<pre><code class="javascript">// myApp/api/models/Pet.js
module.exports = {
  attributes: {
    name: {
      type: &apos;string&apos;
    },
    color: {
      type: &apos;string&apos;
    },
    owner:{
      model:&apos;user&apos;,
      unique: true
    }
  }
}
</code></pre><!-- __LANG=%%__ -->
<pre><code class="javascript">// myApp/api/models/User.js
module.exports = {
  attributes: {
    name: {
      type: &apos;string&apos;
    },
    age: {
      type: &apos;integer&apos;
    },
    pet: {
      collection:&apos;pet&apos;,
      via: &apos;owner&apos;
    }
  }
}
</code></pre><!-- __LANG=%%__ -->
<h3 id="has-one-manual-sync" permalink="has-one-manual-sync">Has One Manual Sync</h3>
<p>In this example, we are associating a <code>Pet</code> with a <code>User</code>. The <code>User</code> may only have one <code>Pet</code> and viceversa, a <code>Pet</code> can only have one <code>User</code>. However in order to query from both sides a <code>model</code> property is added to the <code>User</code> model. This allows us to call both <code>User.find().populate(&apos;pet&apos;)</code> along with <code>Pet.find().populate(&apos;owner&apos;)</code>.</p>
<p>The two models will not stay in sync however. So when updating one side you must remember to update the other side as well.</p>
<pre><code class="javascript">// myApp/api/models/Pet.js
module.exports = {
  attributes: {
    name: {
      type: &apos;string&apos;
    },
    color: {
      type: &apos;string&apos;
    },
    owner:{
      model:&apos;user&apos;
    }
  }
}
</code></pre><!-- __LANG=%%__ -->
<pre><code class="javascript">// myApp/api/models/User.js
module.exports = {
  attributes: {
    name: {
      type: &apos;string&apos;
    },
    age: {
      type: &apos;integer&apos;
    },
    pet: {
      model:&apos;pet&apos;
    }
  }
}
</code></pre><!-- __LANG=%%__ -->
<h3 id="notes" permalink="notes">Notes</h3>
<blockquote>
<p>For a more detailed description of this type of association, see the <a href="https://github.com/balderdashy/waterline-docs/blob/master/models/associations/one-to-one.md" target="_blank">Waterline Docs</a></p>
</blockquote>
<docmeta name="displayName" value="One-to-One">

</docmeta>