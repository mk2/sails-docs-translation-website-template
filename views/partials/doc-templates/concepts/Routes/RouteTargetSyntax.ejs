<h1 id="custom-routes">Custom Routes</h1>
<h3 id="overview" permalink="overview">Overview</h3>
<p>Sails allows you to explicitly route URLs in several different ways in your <strong>config/routes.js</strong> file.  Every route configuration consists of an <strong>address</strong> and a <strong>target</strong>, for example:</p>
<pre><code class="nohighlight">&apos;GET /foo/bar&apos;: &apos;FooController.bar&apos;
^^^address^^^^  ^^^^^^target^^^^^^^
</code></pre><!-- __LANG=%%__ -->
<h3 id="route-address" permalink="route-address">Route Address</h3>
<p>The route address indicates what URL should be matched in order to apply the handler and options defined by the target.  A route consists of an optional verb and a mandatory path:</p>
<pre><code class="nohighlight">&apos;POST  /foo/bar&apos;
^verb^ ^^path^^
</code></pre><!-- __LANG=%%__ -->
<p>If no verb is specified, the route will match any CRUD method (<strong>GET</strong>, <strong>PUT</strong>, <strong>POST</strong>, <strong>DELETE</strong> or <strong>PATCH</strong>).  If <code>ALL</code> is specified as the verb, the route will match <em>any</em> method.</p>
<p>Note the initial <code>/</code> in the path--all paths should start with one in order to work properly.</p>
<h4 id="wildcards-and-dynamic-parameters" permalink="wildcards-and-dynamic-parameters">Wildcards and dynamic parameters</h4>
<p>In addition to specifying a static path like <strong>foo/bar</strong>, you can use <code>*</code> as a wildcard:</p>
<pre><code class="nohighlight">&apos;/*&apos;
</code></pre><!-- __LANG=%%__ -->
<p>will match all paths, where as:</p>
<pre><code class="nohighlight">&apos;/user/foo/*&apos;
</code></pre><!-- __LANG=%%__ -->
<p>will match all paths that <em>start</em> with <strong>/user/foo</strong>.</p>
<blockquote>
<p><strong>Note:</strong> When using a route with a wildcard, such as <code>&apos;/*&apos;</code>, be aware that this will also match requests to static assets (i.e. <code>/js/dependencies/sails.io.js</code>) and override them. To prevent this, consider using the <code>skipAssets</code> option <a href="/documentation/concepts/Routes/RouteTargetSyntax.html?q=route-target-options">described below</a>.</p>
</blockquote>
<p>You can capture the parts of the address that are matched by wildcards into named parameters by using the <code>:paramName</code> wildcard syntax instead of the <code>*</code>:</p>
<pre><code class="nohighlight">&apos;/user/foo/bar/:name&apos;
</code></pre><!-- __LANG=%%__ -->
<p>Will match <em>almost</em> the same URLs as:</p>
<pre><code class="nohighlight">&apos;/user/foo/bar/*&apos;
</code></pre><!-- __LANG=%%__ -->
<p>but will provide the value of the dynamic portions of the route URL to the route handler as parameter values.  In this case: <code>req.param(&apos;name&apos;)</code>.</p>
<blockquote>
<p>Note that the wildcard (<code>*</code>) syntax matches slashes, where the URL pattern variable (<code>:</code>) syntax does not.  So in the example above, given the route address <code>GET /user/foo/bar/*</code>, incoming requests with URLs like <code>/user/foo/bar/baz/bing/bong/bang</code> would match (whereas if you used the <code>:name</code> syntax, the same URL would not match.)</p>
</blockquote>
<h4 id="regular-expressions-in-addresses" permalink="regular-expressions-in-addresses">Regular expressions in addresses</h4>
<p>In addition to the wildcard address syntax, you may also use Regular Expressions to define the URLs that a route should match.  The syntax for defining an address with a regular expression is:</p>
<p><code>&quot;r|&lt;regular expression string&gt;|&lt;comma-delimited list of param names&gt;&quot;</code></p>
<p>That&apos;s the letter &quot;<strong>r</strong>&quot;, followed by a pipe character <code>|</code>, a regular expression string <em>without delimiters</em>, another pipe, and a list of parameter names that should be mapped to parenthesized groups in the regular expression.  For example:</p>
<p><code>&quot;r|^/\\d+/(\\w+)/(\\w+)$|foo,bar&quot;: &quot;MessageController.myaction&quot;</code></p>
<p>Will match <code>/123/abc/def</code>, running the <code>myaction</code> action of <code>MessageController</code> and supplying the values <code>abc</code> and <code>def</code> as <code>req.param(&apos;foo&apos;)</code> and <code>req.param(&apos;bar&apos;)</code>, respectively.</p>
<p>Note the double-backslash in <code>\\d</code> and <code>\\w</code>; this escaping is necessary for the regular expression to work correctly!</p>
<h4 id="about-route-ordering" permalink="about-route-ordering">About route ordering</h4>
<p>When using wildcards or regular expressions in your addresses, keep in mind that the ordering of your routes in <strong>config/routes.js</strong> matters; URLs are matched against addresses in the list from the top down.  If you have two configurations in this order:</p>
<pre><code>&apos;/user&apos;: &apos;UserController.doSomething&apos;,
&apos;/*&apos;   : &apos;CatchallController.doSomethingElse&apos;
</code></pre><p>then a request to <code>/user</code> will not be matched by the second configuration unless the first configuration&apos;s handler calls <code>next()</code> in its code, which is discouraged (only <a href="/documentation/concepts/Policies">policies</a> should call <code>next()</code>).  Unless you&apos;re doing something very advanced, it is safe to assume that every request will be handled by at most one route in your <strong>config/routes.js</strong> file.</p>
<h3 id="route-target" permalink="route-target">Route Target</h3>
<p>The address portion of a custom route specifies which URLs the route should match.  The <em>target</em> portion specifies what Sails should do after the match is made.  A target can take one of several different forms.  In some cases you may want to chain multiple targets to a single address by placing them in an array, but in most cases each address will have only one target.  The different types of targets are discussed below, followed by a discussion of the various options that can be applied to them.</p>
<h4 id="controller-action-target-syntax" permalink="controller-/-action-target-syntax">Controller / action target syntax</h4>
<p>The most common type of target is one which binds a route to a custom <a href="/documentation/concepts/Controllers?q=actions">controller action</a>.  The following four routes are equivalent:</p>
<pre><code class="nohighlight">&apos;GET /foo/go&apos;: &apos;FooController.myGoAction&apos;,
&apos;GET /foo/go&apos;: &apos;Foo.myGoAction&apos;,
&apos;GET /foo/go&apos;: {controller: &quot;Foo&quot;, action: &quot;myGoAction&quot;},
&apos;GET /foo/go&apos;: {controller: &quot;FooController&quot;, action:&quot;myGoAction&quot;},
</code></pre><!-- __LANG=%%__ -->
<p>Each one maps <code>GET /foo/go</code> to the <code>myGoAction</code> action of the controller in <strong>api/controllers/FooController.js</strong>.  If no such controller or action exists, Sails will output an error message and ignore the route.  Otherwise, whenever a <strong>GET</strong> request to <strong>/foo/go</strong> is made, the code in that action will be run.</p>
<p>The controller and action names in this syntax are case-insensitive.</p>
<p>Note that the <a href="/documentation/reference/blueprint-api">blueprint API</a> adds several actions to your controllers by default (like &quot;find&quot;, &quot;create&quot;, &quot;update&quot; and &quot;delete&quot;), all of which are available for routing:</p>
<pre><code class="nohighlight">&apos;GET /foo/go&apos;: &apos;UserController.find&apos;
</code></pre><!-- __LANG=%%__ -->
<p>Assuming that your have a <strong>api/controllers/UserController.js</strong> file and a <strong>api/models/User.js</strong> file, browsing to <strong>/foo/go</strong> in a browser will, using the above config, run the default &quot;find* blueprint action which displays a list of all <code>User</code> models.  If you have a <a href="/documentation/concepts/Controllers?q=actions">custom action</a> named <code>find</code> in UserController, that action will be run instead.</p>
<h4 id="view-target-syntax" permalink="view-target-syntax">View target syntax</h4>
<p>Another common target is one that binds a route to a <a href="/documentation/concepts/Views">view</a>.  This is particularly useful for binding static views to a custom URL, and it&apos;s how the default homepage for new projects is set up out of the box.</p>
<p>The syntax for view targets is simple: it is just the path to the view file, without the file extension (e.g. <code>.ejs</code>) and relative to the <strong>views/</strong> folder :</p>
<pre><code class="nohighlight">&apos;GET /team&apos;: {view: &apos;brochure/about&apos;}
</code></pre><!-- __LANG=%%__ -->
<p>This tells Sails to handle <code>GET</code> requests to <code>/team</code> by serving the view template located at <code>views/brochure/about.ejs</code> (assuming the default EJS <a href="/documentation/concepts/Views/ViewEngines.html">template engine</a> is used).  As long as that view file exists, a <strong>GET</strong> request to  <strong>/home</strong> will display it. For consistency with Express/consolidate, if the specified relative path does not match a view file, then Sails will look for a sub-folder with the same name (e.g. <code>pages/brochure</code>) and serve the &quot;index&quot; view in that sub-folder (e.g. <code>pages/brochure/index.ejs</code>) if one exists.</p>
<blockquote>
<p>Note that since this route is bound directly to the view, none of your configured policies will be applied.  If you need to configure a policy, use <code>res.view()</code> from a controller action.  See <a href="http://stackoverflow.com/questions/21303217/sailsjs-policy-based-route-with-a-view/21340313#21340313" target="_blank">this StackOverflow question</a> for more background information.</p>
</blockquote>
<h4 id="blueprint-target-syntax" permalink="blueprint-target-syntax">Blueprint target syntax</h4>
<p>In some cases you may want to map a non-standard address to one of the Sails <a href="/documentation/reference/blueprint-api?q=blueprint-actions">blueprint actions</a>.  For example, if you have a controller and model named <strong>UserController</strong> and <strong>User</strong> respectively, then Sails will automatically map <strong>GET /user</strong> to the &quot;find&quot; blueprint action which returns a list of User records.  If you&apos;d like to map a different address to that action, you can use the blueprint target syntax:</p>
<pre><code class="nohighlight">&apos;GET /findAllUsers&apos;: {model: &apos;user&apos;, blueprint: &apos;find&apos;},
&apos;GET /user/findAll&apos;: {blueprint: &apos;find&apos;}
</code></pre><!-- __LANG=%%__ -->
<p>Note that in the configuration, both the <code>model</code> and <code>blueprint</code> properties are set, while in the second one, only <code>blueprint</code> is used.  In the second configuration, leaving off the <code>model</code> property causes Sails to examine the address and guess that the model is <code>User</code>.  You could override this by explicitly setting <code>model</code> to something else:</p>
<pre><code class="nohighlight">&apos;GET /user/findAll&apos;: {blueprint: &apos;find&apos;, model: &apos;pet&apos;}
</code></pre><!-- __LANG=%%__ -->
<p>although you will rarely if ever want to do this, as it makes for a messy and confusing API for your app.</p>
<p>If you specify a non-existent model or blueprint in your configuration, Sails will output an error and ignore the route.</p>
<p>You can also use this syntax to map a route to one of the default blueprint actions even if you&apos;ve overridden that action in a controller.</p>
<h4 id="redirect-target-syntax" permalink="redirect-target-syntax">Redirect target syntax</h4>
<p>You can have one address redirect to another--either within your Sails app, or on another server entirely--you can do so just by specifying the redirect URL as a string:</p>
<pre><code class="nohighlight">&apos;/alias&apos; : &apos;/some/other/url&apos;
</code></pre><!-- __LANG=%%__ -->
<p>Be careful to avoid redirect loops when redirecting within your Sails app!</p>
<p>Note that when redirecting, the HTTP method of the original request (and any extra headers / parameters) will likely be lost, and the request will be transformed to a simple <strong>GET</strong> request.  In the above example, a <strong>POST</strong> request to <strong>/alias</strong> will result in a <strong>GET</strong> request to <strong>/some/other/route</strong>.  This is somewhat browser-dependent behavior, but it is recommended that you don&apos;t expect request methods and other data to survive a redirect.</p>
<h4 id="response-target-syntax" permalink="response-target-syntax">Response target syntax</h4>
<p>You can map an address directly to a default or custom <a href="/documentation/concepts/Custom-Responses">response</a> using this syntax:</p>
<pre><code class="nohighlight">&apos;/foo&apos;: {response: &apos;notFound&apos;}
</code></pre><!-- __LANG=%%__ -->
<p>Simply specify the name of the response file in your <strong>api/responses</strong> folder, without the <strong>.js</strong> extension.  The response name in this syntax is case-sensitive.  If you attempt to bind a route to a non-existent response, Sails will output an error and ignore the route.</p>
<h4 id="policy-target-syntax" permalink="policy-target-syntax">Policy target syntax</h4>
<p>In most cases, you will want to apply <a href="/documentation/concepts/Policies">policies</a> to your controller actions using the <a href="/documentation/reference/sails.config/sails.config.policies.html"><strong>config/policies.js</strong></a> config file.  However, there are some times when you will want to apply a policy directly to a custom route: particularly when you are using the <a href="/documentation/concepts/Routes/RouteTargetSyntax.html?q=view-target-syntax">view</a> or <a href="(http://sailsjs.com/documentation/concepts/Routes/RouteTargetSyntax.html?q=blueprint-target-syntax">blueprint</a> target syntax.  The policy target syntax is:</p>
<pre><code class="javascript">&apos;/foo&apos;: { policy: &apos;myPolicy&apos; }
</code></pre><!-- __LANG=%%__ -->
<p>However, you will always want to chain the policy to at least one other type of target, using an array:</p>
<pre><code class="javascript">&apos;/foo&apos;: [
  { policy: &apos;myPolicy&apos; },
  { controller: &apos;user&apos;, action: &apos;find&apos; }
]
</code></pre><!-- __LANG=%%__ -->
<p>This will apply the <strong>myPolicy</strong> policy to the route and, if it passes, continue by running the <strong>find</strong> blueprint for the <strong>User</strong> model.</p>
<h4 id="function-target-syntax" permalink="function-target-syntax">Function target syntax</h4>
<p>For quick-and-dirty jobs (useful for quick tests), you can assign a route directly to a function:</p>
<pre><code class="javascript">&apos;/foo&apos;: function(req, res) { return res.send(&apos;hello!&apos;); }
</code></pre><!-- __LANG=%%__ -->
<p>You can also combine this syntax with others using an array, allowing you to define quick, inline middleware:</p>
<pre><code class="javascript">&apos;/foo&apos;: [
  function(req, res, next) {
    sails.log(&apos;Quick and dirty test:&apos;, req.allParams());
    return next();
  },
  { controller: &apos;user&apos;, action: &apos;find&apos; }
]
</code></pre><!-- __LANG=%%__ -->
<p>You can also use a dictionary with an <code>fn</code> key to assign a function.  This allows you to also specify <a href="/documentation/concepts/routes/custom-routes#?route-target-options">other route target  options</a> at the same time:</p>
<pre><code class="javascript">&apos;GET /*&apos;: {
  fn: function(req, res) {
    return res.send(&apos;hello!&apos;);
  },
  skipAssets: true
}
</code></pre><!-- __LANG=%%__ -->
<blockquote>
<p>Best practice is to use the function syntax only for temporary routes, since it goes against the structural conventions that make Sails useful!  (Plus, the less cluttered your routes.js file, the better.)</p>
</blockquote>
<h3 id="route-target-options" permalink="route-target-options">Route target options</h3>
<p>In addition to the options discussed in the various route target syntaxes above, any other property you add to a route target object will be passed through to the route handler in the <code>req.options</code> object.  There are several reserved properties that can be used to affect the behavior of the route handlers.  These are listed in the table below.</p>
<table>
<thead>
<tr>
<th>Property</th>
<th style="text-align:center">Applicable Target Types</th>
<th>Data Type</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>skipAssets</code></td>
<td style="text-align:center">all</td>
<td><bubble type="boolean" class="colors"><span is="bubble-heart"></span></bubble></td>
<td>Set to <code>true</code> if you <em>don&apos;t</em> want the route to match URLs with dots in them (e.g. <strong>myImage.jpg</strong>).  This will keep your routes with <a href="/documentation/concepts/Routes/RouteTargetSyntax.html?q=wildcards-and-dynamic-parameters">wildcard notation</a> from matching URLs of static assets.  Useful when creating <a href="/documentation/concepts/Routes/URLSlugs">URL slugs</a>.</td>
</tr>
<tr>
<td><code>skipRegex</code></td>
<td style="text-align:center">all</td>
<td><bubble type="regexp" class="colors"><span is="bubble-heart"></span></bubble></td>
<td>If skipping every URL containing a dot is too permissive, or you need a route&apos;s handler to be skipped based on different criteria entirely, you can use <code>skipRegex</code>.  This option allows you to specify a regular expression or array of regular expressions to match the request URL against; if any of the matches are successful, the handler is skipped.  Note that unlike the syntax for binding a handler with a regular expression, <code>skipRegex</code> expects <em>actual <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank">RegExp objects</a></em>, not strings.</td>
</tr>
<tr>
<td><code>locals</code></td>
<td style="text-align:center"><a href="/#!/documentation/concepts/Routes/RouteTargetSyntax.html?q=controller-%2F-action-target-syntax">controller</a>, <a href="/documentation/concepts/Routes/RouteTargetSyntax.html?q=view-target-syntax">view</a>, <a href="/documentation/concepts/Routes/RouteTargetSyntax.html?q=blueprint-target-syntax">blueprint</a>, <a href="/documentation/concepts/Routes/RouteTargetSyntax.html?q=response-target-syntax">response</a></td>
<td><bubble type="dictionary" class="colors"><span is="bubble-heart"></span></bubble></td>
<td>Sets default <a href="/documentation/reference/res/res.view.html?q=arguments">local variables</a> to pass to any view that is rendered while handling the request.</td>
</tr>
<tr>
<td><code>cors</code></td>
<td style="text-align:center">all</td>
<td><bubble type="dictionary" class="colors"><span is="bubble-heart"></span></bubble> or <bubble type="boolean" class="colors"><span is="bubble-heart"></span></bubble> or <bubble type="string" class="colors"><span is="bubble-heart"></span></bubble></td>
<td>Specifies how to handle requests for this route from a different origin.  See the <a href="/documentation/concepts/CORS">main CORS documentation</a> for more info.</td>
</tr>
<tr>
<td><code>populate</code></td>
<td style="text-align:center"><a href="/documentation/concepts/Routes/RouteTargetSyntax.html?q=blueprint-target-syntax">blueprint</a></td>
<td><bubble type="boolean" class="colors"><span is="bubble-heart"></span></bubble></td>
<td>Indicates whether the results in a &quot;find&quot; or &quot;findOne&quot; blueprint action should have associated model fields <a href="/documentation/reference/waterline/populated-values">populated</a>.  Defaults to the value set in <a href="/documentation/reference/sails.config/sails.config.blueprints.html"><strong>config/blueprints.js</strong></a>.</td>
</tr>
<tr>
<td><code>skip</code>, <code>limit</code>, <code>sort</code>, <code>where</code></td>
<td style="text-align:center"><a href="/documentation/concepts/Routes/RouteTargetSyntax.html?q=blueprint-target-syntax">blueprint</a></td>
<td><bubble type="dictionary" class="colors"><span is="bubble-heart"></span></bubble></td>
<td>Set criteria for &quot;find&quot; blueprint.  See the <a href="https://github.com/balderdashy/sails-docs/blob/master/reference/waterline/queries/queries.md" target="_blank">queries reference</a> for more info.</td>
</tr>
</tbody>
</table>
<docmeta name="displayName" value="Custom Routes">
</docmeta>