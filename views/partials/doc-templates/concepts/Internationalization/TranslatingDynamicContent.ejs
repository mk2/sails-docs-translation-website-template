<h3 id="translating-dynamic-content" permalink="translating-dynamic-content">Translating Dynamic Content</h3>
<p>If your backend is storing interlingual data (e.g. product data is entered in multiple languages via a CMS), you shouldn&apos;t rely on simple JSON locale files unless you&apos;re somehow planning on editing your locale translations dynamically.  One option is to edit the locale translations programatically, either with a custom implementation or through a translation service.  Sails/node-i18n JSON stringfiles are compatible with the format used by <a href="https://webtranslateit.com/en" target="_blank">webtranslateit.com</a>.</p>
<p>On the other hand you might opt to store these types of dynamic translated strings in a database.  If so, just make sure and build your data model accordingly so you can store and retrieve the relevant dynamic data by locale id (e.g. &quot;en&quot;, &quot;es&quot;, &quot;de&quot;, etc)  That way, you can leverage the <a href="https://github.com/mashpie/i18n-node#getlocale" target="_blank"><code>req.getLocale()</code></a> method to help you figure out which translated content to use in any given response, and keep consistent with the conventions used elsewhere in your app.</p>
<docmeta name="displayName" value="Translating Dynamic Content">
</docmeta>