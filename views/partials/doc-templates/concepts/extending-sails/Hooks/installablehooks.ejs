<h1 id="creating-an-installable-hook">Creating an Installable Hook</h1>
<p>Installable hooks are custom Sails hooks that reside in an application&#x2019;s <code>node_modules</code> folder.  They are useful when you want to share functionality between Sails apps, or publish your hook to <a href="http://npmjs.org" target="_blank">NPM</a> to share it with the Sails community.  If you wish to create a hook for use in  <em>just one</em> Sails app, see <a href="/documentation/concepts/extending-sails/Hooks/projecthooks.html">creating a project hook</a> instead.</p>
<p>To create a new installable hook:</p>
<ol>
<li>Choose a name for your new hook.  It must not conflict with any of the <a href="https://github.com/balderdashy/sails/blob/master/lib/app/configuration/default-hooks.js" target="_blank">core hook names</a>.</li>
<li>Create a new folder on your system with the name <code>sails-hook-&lt;your hook name&gt;</code>.  The <code>sails-hook-</code> prefix is optional but recommended for consistency; it is stripped off by Sails when the hook is loaded.</li>
<li>Create a <code>package.json</code> file in the folder.  If you have <code>npm</code> installed on your system, you can do this easily by running <code>npm init</code> and following the prompts.  Otherwise, you can create the file manually, and ensure that it contains at a minimum the following:<pre><code class="nohighlight">{
 &quot;name&quot;: &quot;sails-hook-your-hook-name&quot;,
 &quot;version&quot;: &quot;0.0.0&quot;,
 &quot;description&quot;: &quot;a brief description of your hook&quot;,
 &quot;main&quot;: &quot;index.js&quot;,
 &quot;sails&quot;: {
   &quot;isHook&quot;: true
 }
}
</code></pre><!-- __LANG=%%__ -->
If you use <code>npm init</code> to create your <code>package.json</code>, be sure to open the file afterwards and manually insert the <code>sails</code> key containing <code>isHook: true</code>.</li>
<li>Write your hook code in <code>index.js</code> in accordance with the <a href="/documentation/concepts/extending-sails/hooks/hook-specification">hook specification</a>.</li>
</ol>
<p>Your new folder may contain other files as well, which can be loaded in your hook via <code>require</code>; only <code>index.js</code> will be read automatically by Sails.  Use the <code>dependencies</code> key of your <code>package.json</code> to refer to any dependencies that need to be installed in order for your hook to work (you may also use <code>npm install &lt;dependency&gt; --save</code> to easily save dependency information to <code>package.json</code>).</p>
<h3 id="specifying-the-internal-name-sails-uses-for-your-hook-advanced-" permalink="specifying-the-internal-name-sails-uses-for-your-hook-(advanced)">Specifying the internal name Sails uses for your hook (advanced)</h3>
<p>In certain cases, especially when using a <a href="https://docs.npmjs.com/misc/scope" target="_blank">scoped NPM package</a> to override a core Sails hook, you will want to change the name that Sails uses internally when it loads your hook.  You can use the <code>sails.hookName</code> configuration option in your <code>package.json</code> file for this.  The value should be the name you want to be loaded into the <code>sails.hooks</code> dictionary, so you generally will <em>not</em> want a <code>sails-hooks-</code> prefix.  For example, if you have a module <code>@mycoolhooks/sails-hook-sockets</code> that you wish to use to override the core <code>sails-hook-sockets</code> module, the <code>package.json</code> might look like:</p>
<pre><code class="nohighlight">{
    &quot;name&quot;: &quot;@mycoolhooks/sails-hook-sockets&quot;,
    &quot;version&quot;: &quot;0.0.0&quot;,
    &quot;description&quot;: &quot;my own sockets hook&quot;,
    &quot;main&quot;: &quot;index.js&quot;,
    &quot;sails&quot;: {
      &quot;isHook&quot;: true,
      &quot;hookName&quot;: &quot;sockets&quot;
    }
}
</code></pre><!-- __LANG=%%__ -->
<h3 id="testing-your-new-hook" permalink="testing-your-new-hook">Testing your new hook</h3>
<p>Before you distribute your installable hook to others, you&#x2019;ll want to write some tests for it.  This will help ensure compatibility with future Sails versions and significantly reduce hair-pulling and destruction of nearby objects in fits of rage.  While a full guide to writing tests is outside the scope of this doc, the following steps should help get you started:</p>
<ol>
<li>Add Sails as a <code>devDependency</code> in your hook&#x2019;s <code>package.json</code> file:<pre><code class="nohighlight">&quot;devDependencies&quot;: {
   &quot;sails&quot;: &quot;~0.11.0&quot;
}
</code></pre><!-- __LANG=%%__ --></li>
<li>Install Sails as a dependency of your hook with <code>npm install sails</code> or <code>npm link sails</code> (if you have Sails installed globally on your system).</li>
<li>Install <a href="http://mochajs.org/" target="_blank">Mocha</a> on your system with <code>npm install -g mocha</code>, if you haven&#x2019;t already.</li>
<li>Add a <code>test</code> folder inside your hook&#x2019;s main folder.</li>
<li><p>Add a <code>basic.js</code> file with the following basic test:</p>
<pre><code class="nohighlight">var Sails = require(&apos;sails&apos;).Sails;

 describe(&apos;Basic tests ::&apos;, function() {

     // Var to hold a running sails app instance
     var sails;

     // Before running any tests, attempt to lift Sails
     before(function (done) {

         // Hook will timeout in 10 seconds
         this.timeout(11000);

         // Attempt to lift sails
         Sails().lift({
           hooks: {
             // Load the hook
             &quot;your-hook-name&quot;: require(&apos;../&apos;),
             // Skip grunt (unless your hook uses it)
             &quot;grunt&quot;: false
           },
           log: {level: &quot;error&quot;}
         },function (err, _sails) {
           if (err) return done(err);
           sails = _sails;
           return done();
         });
     });

     // After tests are complete, lower Sails
     after(function (done) {

         // Lower Sails (if it successfully lifted)
         if (sails) {
             return sails.lower(done);
         }
         // Otherwise just return
         return done();
     });

     // Test that Sails can lift with the hook in place
     it (&apos;sails does not crash&apos;, function() {
         return true;
     });

 });
</code></pre><!-- __LANG=%%__ --></li>
<li>Run the test with <code>mocha -R spec</code> to see full results.</li>
<li>See the <a href="http://mochajs.org/" target="_blank">Mocha</a> docs for a full reference.</li>
</ol>
<h3 id="publishing-your-hook" permalink="publishing-your-hook">Publishing your hook</h3>
<p>Assuming your hook is tested and looks good, and assuming that the hook name isn&#x2019;t already in use by another <a href="http://npmjs.org" target="_blank">NPM</a> module, you can share it with world by running <code>npm publish</code>.  Go you!</p>
<ul>
<li><a href="/documentation/concepts/extending-sails/Hooks">Hooks overview</a></li>
<li><a href="/documentation/concepts/extending-sails/Hooks/usinghooks.html">Using hooks in your app</a></li>
<li><a href="/documentation/concepts/extending-sails/hooks/hook-specification">The hook specification</a></li>
<li><a href="/documentation/concepts/extending-sails/Hooks/projecthooks.html">Creating a project hook</a></li>
</ul>
<p><docmeta name="displayName" value="Installable Hooks"></docmeta></p>
<docmeta name="stabilityIndex" value="3">
</docmeta>