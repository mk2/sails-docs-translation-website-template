<h1 id="config-views-js">config/views.js</h1>
<h3 id="purpose" permalink="purpose">Purpose</h3>
<p>This file is where Sails looks to find out which templating engine to use when rendering server side HTML templates.  By default Sails uses ejs but it supports all view engines which implement TJ Holowaychuk&apos;s <code>consolidate.js</code>, including, but not limited to:</p>
<ul>
<li>ejs</li>
<li>jade</li>
<li>handlebars</li>
<li>mustache</li>
<li>underscore</li>
<li>hogan</li>
<li>haml</li>
<li>haml-coffee</li>
<li>dust</li>
<li>atpl</li>
<li>eco</li>
<li>ect</li>
<li>jazz</li>
<li>jqtpl</li>
<li>JUST</li>
<li>liquor</li>
<li>QEJS</li>
<li>swig</li>
<li>templayed</li>
<li>toffee</li>
<li>walrus</li>
<li>whiskers</li>
</ul>
<docmeta name="displayName" value="views.js">

<pre><code class="nohighlight">/**
 * View Engine Configuration
 * (sails.config.views)
 *
 * Server-sent views are a classic and effective way to get your app up
 * and running. Views are normally served from controllers.  Below, you can
 * configure your templating language/framework of choice and configure
 * Sails&apos; layout support.
 *
 * For more information on views and layouts, check out:
 * http://sailsjs.com/documentation/reference/configuration/sails-config-views
 */

module.exports.views = {

  // View engine (aka template language)
  // to use for your app&apos;s *server-side* views
  //
  // Sails+Express supports all view engines which implement
  // TJ Holowaychuk&apos;s `consolidate.js`, including, but not limited to:
  //
  // ejs, jade, handlebars, mustache
  // underscore, hogan, haml, haml-coffee, dust
  // atpl, eco, ect, jazz, jqtpl, JUST, liquor, QEJS,
  // swig, templayed, toffee, walrus, &amp; whiskers

  // For more options, check out the docs:
  // https://github.com/balderdashy/sails-wiki/blob/0.9/config.views.md#engine

  engine: &apos;ejs&apos;,



  // Layouts are simply top-level HTML templates you can use as wrappers
  // for your server-side views.  If you&apos;re using ejs or jade, you can take advantage of
  // Sails&apos; built-in `layout` support.
  //
  // When using a layout, when one of your views is served, it is injected into
  // the `body` partial defined in the layout.  This lets you reuse header
  // and footer logic between views.
  //
  // NOTE:  Layout support is only implemented for the `ejs` view engine!
  //        For most other engines, it is not necessary, since they implement
  //        partials/layouts themselves.  In those cases, this config will be silently
  //        ignored.
  //
  // The `layout` setting may be set to one of the following:
  //
  // If `false`, layouts will be disabled.
  // Otherwise, if a string is specified, it will be interpreted as the relative path
  // to your layout file from `views/` folder. (the file extension, &quot;.ejs&quot;, should be omitted)
  //

  layout: &apos;layout&apos;



  // Using Multiple Layouts with EJS
  //
  // If you&apos;re using the default engine, `ejs`, Sails supports the use of multiple
  // `layout` files.  To take advantage of this, before rendering a view, override
  // the `layout` local in your controller by setting `res.locals.layout`.
  // (this is handy if you parts of your app&apos;s UI look completely different from each other)
  //
  // e.g. your default might be
  // layout: &apos;layouts/public&apos;
  //
  // But you might override that in some of your controllers with:
  // layout: &apos;layouts/internal&apos;


};
</code></pre><!-- __LANG=%%__ -->
</docmeta>