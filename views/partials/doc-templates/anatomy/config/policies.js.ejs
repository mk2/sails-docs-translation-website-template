<h1 id="config-policies-js">config/policies.js</h1>
<h3 id="purpose" permalink="purpose">Purpose</h3>
<p>This file contains the default policies for your app.</p>
<p>Policies are simply Express middleware functions which run before your controllers. You can apply one or more policies to a given controller, or protect just one of it&apos;s actions. Any policy file (e.g. <code>api/policies/sessionAuth.js</code>) can be dropped into the <code>api/policies/</code> folder, at which point it can be accessed by it&apos;s filename, minus the extension, (e.g. <code>sessionAuth</code>).</p>
<docmeta name="displayName" value="policies.js">

<pre><code class="nohighlight">/**
 * Policy Mappings
 * (sails.config.policies)
 *
 * Policies are simple functions which run **before** your controllers.
 * You can apply one or more policies to a given controller, or protect
 * its actions individually.
 *
 * Any policy file (e.g. `api/policies/authenticated.js`) can be accessed
 * below by its filename, minus the extension, (e.g. &quot;authenticated&quot;)
 *
 * For more information on configuring policies, check out:
 * http://sailsjs.com/documentation/
 */


module.exports.policies = {

  // Default policy for all controllers and actions
  // (`true` allows public access)
  &apos;*&apos;: true,

  // Here&apos;s an example of mapping some policies to run before
  // a controller and its actions
  // RabbitController: {

    // Apply the `false` policy as the default for all of RabbitController&apos;s actions
    // (`false` prevents all access, which ensures that nothing bad happens to our rabbits)
    // &apos;*&apos;: false,

    // For the action `nurture`, apply the &apos;isRabbitMother&apos; policy
    // (this overrides `false` above)
    // nurture  : &apos;isRabbitMother&apos;,

    // Apply the `isNiceToAnimals` AND `hasRabbitFood` policies
    // before letting any users feed our rabbits
    // feed : [&apos;isNiceToAnimals&apos;, &apos;hasRabbitFood&apos;]
  // }
};
</code></pre><!-- __LANG=%%__ -->
</docmeta>