<h1 id="tasks-config-coffee-js">tasks/config/coffee.js</h1>
<h3 id="purpose" permalink="purpose">Purpose</h3>
<p>This file configures a Grunt task called &quot;coffee&quot;.</p>
<p>By default, this compiles CoffeeScript files located in <a href="/anatomy/assets/js/"><code>assets/js/</code></a> into JavaScript, then generates new <code>.js</code> files in <code>.tmp/public/js/</code>.</p>
<h3 id="but-i-m-not-using-coffeescript-" permalink="but-im-not-using-coffeescript">But I&apos;m not using CoffeeScript...</h3>
<p>No problem!</p>
<p>If you aren&apos;t using any kind of pre-processing for your client-side JavaScript, then just ignore this file.</p>
<p>If you want to use a <em>different</em> pre-processor like <a href="https://www.typescriptlang.org/" target="_blank">TypeScript</a> or <a href="https://babeljs.io/" target="_blank">Babel</a>, and you want Sails to process your client-side JavaScript assets automatically as you work, then you&apos;re in luck.  In most cases, this is as easy as installing the appropriate Grunt plugin as a dependency of your Sails app, and then configuring it to output compiled JavaScript to the same path as in this default task.</p>
<p>Here are a couple of popular examples:</p>
<ul>
<li><a href="https://www.npmjs.com/package/grunt-ts" target="_blank">grunt-ts</a></li>
<li><a href="https://www.npmjs.com/package/grunt-babel" target="_blank">grunt-babel</a></li>
</ul>
<h3 id="usage" permalink="usage">Usage</h3>
<p>For additional usage documentation, see <a href="https://npmjs.com/package/grunt-contrib-coffee" target="_blank"><code>grunt-contrib-coffee</code></a>.</p>
<docmeta name="displayName" value="coffee.js">
</docmeta>