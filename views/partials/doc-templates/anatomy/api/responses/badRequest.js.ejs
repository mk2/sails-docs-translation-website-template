<h1 id="api-responses-badrequest-js">api/responses/badRequest.js</h1>
<h3 id="purpose" permalink="purpose">Purpose</h3>
<p>This is one of the default Server Responses included in a new Sails project.</p>
<p>It contains the logic for what should happen when you wish to issue an http 400 response. It can be issued from anywhere you have access to the express <code>res</code> object by calling res.badRequest.</p>
<p>Feel free to edit this file to suit your needs.  You can also create a custom response using our <code>sails-generate-custom-response</code> generator.</p>
<p>See the Response section of Reference Documentation for more info.</p>
<docmeta name="displayName" value="badRequest.js">

<pre><code class="nohighlight">/**
 * 400 (Bad Request) Handler
 *
 * Usage:
 * return res.badRequest();
 * return res.badRequest(err);
 * return res.badRequest(err, view);
 * return res.badRequest(err, redirectTo);
 *
 * e.g.:
 * return res.badRequest(
 *   &apos;Please choose a valid `password` (6-12 characters)&apos;,
 *   &apos;/trial/signup&apos;
 * );
 *
 */

module.exports = function badRequest(err, viewOrRedirect) {

  // Get access to `req` &amp; `res`
  var req = this.req;
  var res = this.res;

  // Serve JSON (with optional JSONP support)
  function sendJSON (data) {
    if (!data) {
      return res.send();
    }
    else {
      if (typeof data !== &apos;object&apos; || data instanceof Error) {
        data = {error: data};
      }
      if ( req.options.jsonp &amp;&amp; !req.isSocket ) {
        return res.jsonp(data);
      }
      else return res.json(data);
    }
  }

  // Set status code
  res.status(400);

  // Log error to console
  this.req._sails.log.verbose(&apos;Sent 400 (&quot;Bad Request&quot;) response&apos;);
  if (err) {
    this.req._sails.log.verbose(err);
  }

  // If the user-agent wants JSON, always respond with JSON
  if (req.wantsJSON) {
    return sendJSON(err);
  }

  // Make data more readable for view locals
  var locals;
  if (!err) { locals = {}; }
  else if (typeof err !== &apos;object&apos;){
    locals = {error: err};
  }
  else {
    var readabilify = function (value) {
      if (sails.util.isArray(value)) {
        return sails.util.map(value, readabilify);
      }
      else if (sails.util.isPlainObject(value)) {
        return sails.util.inspect(value);
      }
      else return value;
    };
    locals = { error: readabilify(err) };
  }

  // Serve HTML view or redirect to specified URL
  if (typeof viewOrRedirect === &apos;string&apos;) {
    if (viewOrRedirect.match(/^(\/|http:\/\/|https:\/\/)/)) {
      return res.redirect(viewOrRedirect);
    }
    else return res.view(viewOrRedirect, locals, function viewReady(viewErr, html) {
      if (viewErr) return sendJSON(err);
      else return res.send(html);
    });
  }
  else return res.view(&apos;400&apos;, locals, function viewReady(viewErr, html) {
    if (viewErr) return sendJSON(err);
    else return res.send(html);
  });
};
</code></pre><!-- __LANG=%%__ -->
</docmeta>